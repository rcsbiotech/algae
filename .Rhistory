### Parses list into objects
all.df <- unlist(tmp.diffex)
for (listElement in 1:length(all.df)) {
## Saves DF inside another list
allDiffExWald[names(all.df[listElement])] <- all.df[listElement]
}
}
## Start with empty df
# all.df <- data.frame(matrix(nrow=dim(allDiffExWald[[1]])[1],ncol=0))
count_flag = 0
for (df in names(allDiffExWald)){
## Adds gene names
# allDiffExWald[df][[1]]$gene <- row.names(allDiffExWald[df][[1]])
## Captures each diffex.df
current.df <- as.data.frame(allDiffExWald[df])
## Add gene name
current.df$gene <- row.names(allDiffExWald[df][[1]])
## Keeps only useful info
current.df <- current.df[,c(2,5,6,7)]
## Stores the information.
## if 0: new table
## if =! 0: merge tables
if (count_flag == 0) {
keep.df <- current.df
} else {
keep.df <- merge(keep.df, current.df, by = "gene")
}
## Adds to counter
count_flag = count_flag + 1
}
## Output: master table (keep.df)
### Merge gene and isoform
i.map.tmp <- i.map
colnames(i.map.tmp)[2] <- "gene"
keep.df <- merge(keep.df, i.map.tmp, by = "gene")
### Put gene as col2, isoform as col1
allColsLength <- dim(keep.df)[2]
keep.df <- keep.df[,c(1,allColsLength,2:(allColsLength-1))]
## Generates output path
outpath_master = paste(i.outdir, "MasterTable", ".tsv", sep = "")
## Escreve a tabela
write.table(x = keep.df, file = outpath_master, quote = F,
sep = "\t", row.names = F, col.names = T)
## Output: Per condition table ----
# 1. One table per condition, with condition as a name
# 2. Saves to target output directory
for (df in 1:length(allDiffExWald)) {
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, i.map, by="gene_id", all.x=T)
## OutTable: pick only useful columns
outTable <- curTable[,c(5,1,2,3,4)]
## Filter clean outs: L2FC
outTable <- outTable[abs(outTable$L2FC) > 1,]
## Filter by: pval
outTable <- outTable[abs(outTable$`p-val`) < 0.12,]
## Filter out: NA p-adj
outTable <- outTable[! is.na(outTable$`p-adj`),]
## Significant at 0.05
outTable$sigpadj005 <- ifelse(outTable$`p-adj` < 0.05, "yes_padj005", "no_padj005")
outTable$sigpadj010 <- ifelse(outTable$`p-adj` < 0.10, "yes_padj010", "no_padj010")
outTable$sigpval005 <- ifelse(outTable$`p-val` < 0.05, "yes_pval005", "no_pval005")
outTable$sigpval010 <- ifelse(outTable$`p-val` < 0.10, "yes_pval010", "no_pval010")
## Generates output path
outpath = paste(i.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = outTable, file = outpath, quote = F,
sep = "\t", row.names = F, col.names = T)
}
# Input files
## Samba coding/noncoding TSV
df.samba <- read.delim(
file = "./test/02_transcriptTable/samba.tsv"
)
View(df.samba)
# Input files
## Samba coding/noncoding TSV
df.samba <- read.delim(
file = "./test/02_transcriptTable/samba.tsv",
stringsAsFactors = F
)
## RNA-Seq MasterTable
df.masterTable <- read.delim(
file = "./test/02_transcriptTable/MasterTable.tsv"
)
## RNA-Seq MasterTable
df.masterTable <- read.delim(
file = "./test/02_transcriptTable/MasterTable.tsv",
stringsAsFactors = F
)
View(df.masterTable)
## 3. Emapper table
df.emapper.raw <- read.delim(
file = "./test/02_transcriptTable/test.emapper.annotations",
stringsAsFactors = F
)
## 3. Emapper table
df.emapper.raw <- readRaw(
file = "./test/02_transcriptTable/test.emapper.annotations",
stringsAsFactors = F
)
## 3. Emapper table
df.emapper.raw <- read.file(
file = "./test/02_transcriptTable/test.emapper.annotations",
stringsAsFactors = F
)
## 3. Emapper table
df.emapper.raw <- system.file(
file = "./test/02_transcriptTable/test.emapper.annotations",
package = "readtext"
)
df.emapper.raw
df.emapper.raw[2]
df.emapper.raw[1
df.emapper.raw[]
df.emapper.raw[0]
df.emapper.raw[3
]
df.emapper.raw
require(readtext)
install.packages("readtext")
# [. L]
require(readtext)
## 3. Emapper table
text.emapper <- readtext(
file = "./test/02_transcriptTable/test.emapper.annotations",
package = "readtext"
)
## 3. Emapper table
text.emapper <- readtext("./test/02_transcriptTable/test.emapper.annotations")
text.emapper
text.emapper]1\
text.emapper[1]
text.emapper[2]
text.emapper[23
]
text.emapper[23,3]
text.emapper[23]
text.emapper
text.emapper[1]
text.emapper[1][1]
text.emapper[1][1][1]
text.emapper[1][1][1][[1]]
text.emapper[1][1][1][[2]
text.emapper[1][1][1][[2]]
text.emapper[[1]]
text.emapper[[1]][2]
print(text.emapper, n = 3)
print(text.emapper, n = 15)
print(text.emapper, n = 50)
text.emapper
text.emapper(1)
text.emapper[[1]]
text.emapper["test.emapper.annotations]
text.emapper["test.emapper.annotations"]
text.emapper["test.emapper.annotations", 2]
text.emapper["test.emapper.annotations", 1]
text.emapper["test.emapper.annotations", 0]
library(stringi)
## 3. Emapper table
text.emapper <- n.readLines("./test/02_transcriptTable/test.emapper.annotations")
## 3. Emapper table
text.emapper <- readLines("./test/02_transcriptTable/test.emapper.annotations")
text.emapper
dim(text.emapper)
tmp.emapper <- text.emapper[-c(1,2),]
tmp.emapper <- text.emapper[-c(1,2)]
length(tmp.emapper)
tmp.emapper <- text.emapper[-c(tmp.emapper,tmp.emapper-1)]
tmp.emapper
tmp.emapper <- text.emapper[-c(size.tmp,size.tmp-1)]
size.tmp <- length(tmp.emapper)
tmp.emapper <- text.emapper[-c(size.tmp,size.tmp-1)]
test.emapper.df <- as.data.frame(tmp.emapper)
View(test.emapper.df)
View(test.emapper.df)
### Remove two eggnog header lines
tmp.emapper <- text.emapper[c(-1,-2)]
size.tmp <- length(tmp.emapper)
### Remove two eggnog dirty tail lines
tmp.emapper <- text.emapper[-c(size.tmp,size.tmp-1)]
### Convert to data.frame
test.emapper.df <- as.data.frame(tmp.emapper)
head(test.emapper.df)
## 3. Emapper table
text.emapper <- readLines("./test/02_transcriptTable/test.emapper.annotations",
n = -2,
skip = 2)
head(text.emapper)
## 3. Emapper table
text.emapper <- read.table(
file = "./test/02_transcriptTable/test.emapper.annotations",
skip = 2)
## 3. Emapper table
text.emapper <- read.table(
file = "./test/02_transcriptTable/test.emapper.annotations",
sep = "\t",
skip = 2)
rm(test.emapper.df)
rm(text.emapper)
## 3. Emapper table
text.emapper <- read.table(
file = "./test/02_transcriptTable/test.emapper.annotations",
sep = "\t",
comment.char="#"
skip = 2)
## 3. Emapper table
text.emapper <- read.table(
file = "./test/02_transcriptTable/test.emapper.annotations",
sep = "\t",
comment.char="#",
skip = 2)
## 3. Emapper table
text.emapper <- read.table(
file = "./test/02_transcriptTable/test.emapper.annotations",
sep = "\t",
comment.char="#",
skip = 3)
## 3. Emapper table
text.emapper <- read.table(
file = "./test/02_transcriptTable/test.emapper.annotations",
sep = "\t",
comment.char="#",
skip = 3)
## 3. Emapper table
text.emapper <- read.table(
file = "./test/02_transcriptTable/test.emapper.annotations",
sep = "\t",
comment.char="#",
skip = 3)
## 3. Emapper table
text.emapper <- read.delim(
file = "./test/02_transcriptTable/test.emapper.annotations",
stringsAsFactors = F
)
View(text.emapper)
colnames(df.samba)
# GenerateTranscriptTable.R
# Description: Stores information prior to sequence clustering
# Inputs:
# 1. Samba.tsv coding and noncoding annotation
# 2. MasterTable.tsv diffex conditions table
# 3. Emapper.tsv crude sequence annotation
#### [ Libraries ] ####
require(stringi)
#### [ Input files ] ####
## 1. Samba coding/noncoding TSV
df.samba <- read.delim(
file = "./test/02_transcriptTable/samba.tsv",
stringsAsFactors = F
)
## 2. RNA-Seq MasterTable
df.masterTable <- read.delim(
file = "./test/02_transcriptTable/MasterTable.tsv",
stringsAsFactors = F
)
## 3. Emapper table
text.emapper <- read.delim(
file = "./test/02_transcriptTable/test.emapper.annotations",
stringsAsFactors = F
)
head(df.masterTable)
View(df.masterTable)
# [ Annotate stress activity ] ####
## 1. Get all columns with sig padj
## 2. Split per category
## 3. Bind back, split with ";"
colnames(df.masterTable)
# [ Annotate stress activity ] ####
## 1. Get all columns with sig padj
## 2. Split per category
## 3. Bind back, split with ";"
grep("padj", colnames(df.masterTable))
# [ Annotate stress activity ] ####
## 1. Get all columns with sig padj
## 2. Split per category
## 3. Bind back, split with ";"
padj.cols <- grep("padj", colnames(df.masterTable))
# [[ Case 1. Stress vs Control ]] ####
length(padj.cols)
# [[ Case 1. Stress vs Control ]] ####
length(padj.cols)
padj.cols
padj.cols[1]
padj.cols[1:6]
# [[ Case 1. Stress vs Control ]] ####
valid.cols.limit <- (length(padj.cols)/2)
valid.cols.limit
padj.cols <- padj.cols[1:valid.cols.limit]
padj.cols
df.masterTable[,padj.cols]
colnames(df.masterTable[,padj.cols])
ifelse(df.masterTable[,padj.cols[1]] <= 0.05
yes = print("Yes"),
no = print("F"))
ifelse(df.masterTable[,padj.cols[1]] <= 0.05
yes = print("Yes"),
no = print("F"))
ifelse(df.masterTable[,padj.cols[1]] <= 0.05,
yes = print("Yes"),
no = print("F"))
print(column)
## Test value per value, for each valid column
for (column in 1:length(padj.cols)) {
print(column)
}
print(padj_cols[column_index])
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
print(padj_cols[column_index])
}
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
print(padj.cols[column_index])
}
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
# (test) Every valid column
# print(padj.cols[column_index])
colnames(df.masterTable[,column_index])
}
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
# (test) Every valid column
# print(padj.cols[column_index])
# print(colnames(df.masterTable[,column_index]))
}
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
# (test) Every valid column
# print(padj.cols[column_index])
print(colnames(df.masterTable[,column_index]))
}
column_index
df.masterTable[,column_index]
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
# (test) Every valid column
# print(padj.cols[column_index])
print(colnames(df.masterTable)[column_index])
}
padj.cols
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
column <- padj.cols[column_index]
print(colnames(df.masterTable)[column])
}
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
## Separa a coluna da matriz
column <- padj.cols[column_index]
## Na coluna, extrai um vetores sig < 0.1
sigvals <- ifelse(df.masterTable[,padj.cols[1]] <= 0.05,
yes = print("Sig"),
no = print("NA"))
#print(colnames(df.masterTable)[column])
}
sigvals
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
## Separa a coluna da matriz
column <- padj.cols[column_index]
## Na coluna, extrai um vetores sig < 0.1
sigvals <- ifelse(df.masterTable[,padj.cols[column]] <= 0.05,
yes = print("Sig"),
no = print("NA"))
#print(colnames(df.masterTable)[column])
}
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
## Separa a coluna da matriz
column <- padj.cols[column_index]
## Na coluna, extrai um vetores sig < 0.1
sigvals <- ifelse(df.masterTable[,column] <= 0.05,
yes = print("Sig"),
no = print("NA"))
#print(colnames(df.masterTable)[column])
}
sigvals
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
## Separa a coluna da matriz
column <- padj.cols[column_index]
## Na coluna, extrai um vetores sig < 0.1
sigvals <- ifelse(df.masterTable[,column] <= 0.05,
yes = "Sig",
no = "NA")
#print(colnames(df.masterTable)[column])
}
sigvals
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
## Separa a coluna da matriz
column <- padj.cols[column_index]
## Na coluna, extrai um vetores sig < 0.1
sigvals <- ifelse(df.masterTable[,column] <= 0.05,
yes = "Sig",
no = NA)
#print(colnames(df.masterTable)[column])
}
sigvals
sigvals
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
## Separa a coluna da matriz
column <- padj.cols[column_index]
## Na coluna, extrai um vetores sig < 0.1
sigvals <- ifelse(df.masterTable[,column] <= 0.05,
yes = 1,
no = NA)
#print(colnames(df.masterTable)[column])
}
sigvals
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
## Separa a coluna da matriz
column <- padj.cols[column_index]
## Na coluna, extrai um vetores sig < 0.1
sigvals <- ifelse(df.masterTable[,column] <= 0.05,
yes = TRUE,
no = FALSE)
#print(colnames(df.masterTable)[column])
}
sigvals
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
## Get one sig column
column <- padj.cols[column_index]
## Get column names
colname <- colnames(df.masterTable)[column]
## Get significant values, annotate trat
sigvals <- ifelse(df.masterTable[,column] <= 0.05,
yes = TRUE,
no = FALSE)
}
colname
colname
split(colname, ".")
split(colname, "_")
strsplit(colname, -)
strsplit(colname, "_")
sigvals
colname
df.masterTable[,column] <= 0.05
! is.na(df.masterTable[,column] <= 0.05)
## Split treatments:
### [1] T1
### [2] T2.padj
## Filter out NAs
df.tmp <- df.mastertable[! is.na(df.masterTable[,column] <= 0.05,]
## Get significant values, annotate trat
sigvals <- ifelse(df.masterTable[,column] <= 0.05,
yes = TRUE,
no = FALSE)
}
ifelse(df.masterTable[,padj.cols[1]] <= 0.05,
yes = print("Yes"),
no = print("F"))
df.tmp <- df.mastertable[! is.na(df.masterTable[,column] <= 0.05,]
## Split treatments:
### [1] T1
### [2] T2.padj
## Filter out NAs
df.tmp <- df.mastertable[!is.na(df.masterTable[,column] <= 0.05),]
## Split treatments:
### [1] T1
### [2] T2.padj
## Filter out NAs
df.tmp <- df.masterTable[!is.na(df.masterTable[,column] <= 0.05),]
df.tmp
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
## Get one sig column
column <- padj.cols[column_index]
## Get column names
colname <- colnames(df.masterTable)[column]
## Split treatments:
### [1] T1
### [2] T2.padj
## Filter out NAs
df.tmp <- df.masterTable[!is.na(df.masterTable[,column] <= 0.05),]
## Get significant values, annotate trat
sigvals <- ifelse(df.tmp[,column] <= 0.05,
yes = TRUE,
no = FALSE)
}
sigvals
df.masterTable
df.masterTable$transcript_id
View(df.masterTable)
colname
strsplit(colname, ".padj")
strsplit(colname, ".padj")[1]
strsplit(colname, ".padj")[[1]]
otu <- read.delim(file = "E:/tmp/00_merge/01_otutab.txt",
stringsAsFactors = F)
View(otu)
tax <- read.delim(file = "E:/tmp/00_merge/03_annot.A01.deparsed.txt",
stringsAsFactors = F)
View(tax)
colnames(otu)[1] = "Name"
colnames(tax)[1] = "Name"
head(otu)
merged <- merge(otu, tax, by = "Name")
View(merged)
write.table(x = merged, file = "E:/tmp/00_merge/merged.txt", quote = F,
sep = "\t", row.names = F, col.names = T)
