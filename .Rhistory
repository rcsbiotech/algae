for (cols in treatmentCols){
## Generates colNames
## Grabs the interestColumn
interestColumn <- colnames(i.metadata[cols])
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, i.metadata, interestColumn)
## Stores output
### Parses list into objects
all.df <- unlist(tmp.diffex)
for (listElement in 1:length(all.df)) {
## Saves DF inside another list
allDiffExWald[names(all.df[listElement])] <- all.df[listElement]
}
}
## [r2c]
backup <- allDiffexWald
allDiffexWald[[1]]
allDiffexWald[1]
allDiffexWald[1][[1]]
allDiffexWald
tmp.diffex
deseq.out
DiffExGenesLists
allDiffExWald
outTable[! is.na(outTable$`p-adj`),]
## Filter out: NA p-adj
outTable <- outTable[! is.na(outTable$`p-adj`),]
### Extract all treatments
treatmentCols <- grep(pattern = "^C_", x = colnames(i.metadata))
timeCourseCols <- grep(pattern = "^TC_", x = colnames(i.metadata))
## Loop: generates one DESeq2 object per column ----
allDiffExWald <- list()
for (cols in treatmentCols){
## Generates colNames
## Grabs the interestColumn
interestColumn <- colnames(i.metadata[cols])
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, i.metadata, interestColumn)
## Stores output
### Parses list into objects
all.df <- unlist(tmp.diffex)
for (listElement in 1:length(all.df)) {
## Saves DF inside another list
allDiffExWald[names(all.df[listElement])] <- all.df[listElement]
}
}
## [r2c]
backup <- allDiffexWald
allDiffexWald
## [r2c]
backup <- allDiffExWald
allDiffExWald
allDiffExWald$High_temperature_Low_temperature
## Start with empty df
all.df <- data.frame()
for (df in names(allDiffExWald)){
## Adds gene names
allDiffExWald[df][[1]]$gene <- row.names(allDiffExWald[df][[1]])
## Captures each diffex.df
current.df <- as.data.frame(allDiffExWald[df])
## Keeps only useful info
current.df <- current.df[,c(2,5,6,7)]
## Stores the information.
all.df <- cbind(all.df, current.df)
}
allDiffExWald
allDiffExWald[[1]]
dim(allDiffExWald[[1]])
matrix(nrow=dim(allDiffExWald[[1]])[1],ncol=0)
## Start with empty df
all.df <- data.frame(matrix(nrow=dim(allDiffExWald[[1]])[1],ncol=0))
for (df in names(allDiffExWald)){
## Adds gene names
allDiffExWald[df][[1]]$gene <- row.names(allDiffExWald[df][[1]])
## Captures each diffex.df
current.df <- as.data.frame(allDiffExWald[df])
## Keeps only useful info
current.df <- current.df[,c(2,5,6,7)]
## Stores the information.
all.df <- cbind(all.df, current.df)
}
dim(all.df)
View(all.df)
df
row.names(allDiffExWald[df])
row.names(allDiffExWald[df][1])
row.names(allDiffExWald[df][[1])
row.names(allDiffExWald[df][[1]])
## Start with empty df
all.df <- data.frame(matrix(nrow=dim(allDiffExWald[[1]])[1],ncol=0))
## Start with empty df
# all.df <- data.frame(matrix(nrow=dim(allDiffExWald[[1]])[1],ncol=0))
count_flag = 0
for (df in names(allDiffExWald)){
## Adds gene names
# allDiffExWald[df][[1]]$gene <- row.names(allDiffExWald[df][[1]])
## Captures each diffex.df
current.df <- as.data.frame(allDiffExWald[df])
## Add gene name
current.df$gene <- row.names(allDiffExWald[df][[1]])
## Keeps only useful info
current.df <- current.df[,c(2,5,6,7)]
## Stores the information.
## if 0: new table
## if =! 0: merge tables
if (count_flag == 0) {
keep.df <- current.df
} else {
keep.df <- merge(keep.df, current.df, by = "gene")
}
## Adds to counter
count_flag = count_flag + 1
}
allDiffExWald[df]
## [r2c]
# backup <- allDiffExWald
allDiffExWald <- backup
## Start with empty df
# all.df <- data.frame(matrix(nrow=dim(allDiffExWald[[1]])[1],ncol=0))
count_flag = 0
for (df in names(allDiffExWald)){
## Adds gene names
# allDiffExWald[df][[1]]$gene <- row.names(allDiffExWald[df][[1]])
## Captures each diffex.df
current.df <- as.data.frame(allDiffExWald[df])
## Add gene name
current.df$gene <- row.names(allDiffExWald[df][[1]])
## Keeps only useful info
current.df <- current.df[,c(2,5,6,7)]
## Stores the information.
## if 0: new table
## if =! 0: merge tables
if (count_flag == 0) {
keep.df <- current.df
} else {
keep.df <- merge(keep.df, current.df, by = "gene")
}
## Adds to counter
count_flag = count_flag + 1
}
keep.df
View(keep.df)
outpath
i.outdir
## Output: master table (keep.df)
## Generates output path
outpath_master = paste(i.outdir, "MasterTable", ".tsv", sep = "")
outpath_master
## Output: master table (keep.df)
## Generates output path
outpath_master = paste(i.outdir, "/MasterTable", ".tsv", sep = "")
i.outdir
outpath_master
## Escreve a tabela
write.table(x = keep.df, file = outpath_master, quote = F,
sep = "\t", row.names = F, col.names = T)
## Output: master table (keep.df)
## Generates output path
outpath_master = paste(i.outdir, "MasterTable", ".tsv", sep = "")
## Escreve a tabela
write.table(x = keep.df, file = outpath_master, quote = F,
sep = "\t", row.names = F, col.names = T)
getwd()
i.map
#### Add colnames to tx2gene map
colnames(i.map) <- c("transcript_id", "gene_id")
## Output: master table (keep.df)
### Merge gene and isoform
i.map.tmp <- i.map
colnames(i.map.tmp)[2] <- "gene"
keep.df <- merge(keep.df, i.map, by = "gene")
keep.df <- merge(keep.df, i.map.tmp, by = "gene")
View(keep.df)
### Put gene as col2, isoform as col1
dim(keep.df)
### Put gene as col2, isoform as col1
allColsLength <- dim(keep.df)[2]
keep.df <- keep.df[,c(1,allColsLength,2:allColsLength-1)]
View(keep.df)
## Start with empty df
# all.df <- data.frame(matrix(nrow=dim(allDiffExWald[[1]])[1],ncol=0))
count_flag = 0
for (df in names(allDiffExWald)){
## Adds gene names
# allDiffExWald[df][[1]]$gene <- row.names(allDiffExWald[df][[1]])
## Captures each diffex.df
current.df <- as.data.frame(allDiffExWald[df])
## Add gene name
current.df$gene <- row.names(allDiffExWald[df][[1]])
## Keeps only useful info
current.df <- current.df[,c(2,5,6,7)]
## Stores the information.
## if 0: new table
## if =! 0: merge tables
if (count_flag == 0) {
keep.df <- current.df
} else {
keep.df <- merge(keep.df, current.df, by = "gene")
}
## Adds to counter
count_flag = count_flag + 1
}
## Output: master table (keep.df)
### Merge gene and isoform
i.map.tmp <- i.map
colnames(i.map.tmp)[2] <- "gene"
keep.df <- merge(keep.df, i.map.tmp, by = "gene")
allColsLength-1
keep.df[,31]
View(keep.df)
allColsLength
c(1,allColsLength,2:allColsLength-1
)
2:(allColsLength-1))
2:(allColsLength-1)
2:(allColsLength-1)
keep.df <- keep.df[,c(1,allColsLength,2:(allColsLength-1))]
View(keep.df)
## Generates output path
outpath_master = paste(i.outdir, "MasterTable", ".tsv", sep = "")
## Escreve a tabela
write.table(x = keep.df, file = outpath_master, quote = F,
sep = "\t", row.names = F, col.names = T)
## Escreve a tabela
write.table(x = keep.df, file = outpath_master, quote = F,
sep = "\t", row.names = F, col.names = T)
## Output: Per condition table ----
# 1. One table per condition, with condition as a name
# 2. Saves to target output directory
for (df in 1:length(allDiffExWald)) {
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, i.map, by="gene_id", all.x=T)
## OutTable
outTable <- curTable[,c(5,1,2,3,4)]
## Filter clean outs: L2FC
outTable <- outTable[abs(outTable$L2FC) > 1,]
## Filter by: pval
outTable <- outTable[abs(outTable$`p-val`) < 0.12,]
## Filter out: NA p-adj
outTable <- outTable[! is.na(outTable$`p-adj`),]
## Significant at 0.05
outTable$sigpadj005 <- ifelse(curTable$`p-adj` < 0.05, "yes_padj005", "no_padj005")
outTable$sigpadj010 <- ifelse(curTable$`p-adj` < 0.10, "yes_padj010", "no_padj010")
outTable$sigpval005 <- ifelse(curTable$`p-val` < 0.05, "yes_pval005", "no_pval005")
outTable$sigpval010 <- ifelse(curTable$`p-val` < 0.05, "yes_pval010", "no_pval010")
## Generates output path
outpath = paste(i.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = outTable, file = outpath, quote = F,
sep = "\t", row.names = F, col.names = T)
}
df
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, i.map, by="gene_id", all.x=T)
## OutTable
outTable <- curTable[,c(5,1,2,3,4)]
## Filter clean outs: L2FC
outTable <- outTable[abs(outTable$L2FC) > 1,]
## Filter by: pval
outTable <- outTable[abs(outTable$`p-val`) < 0.12,]
## Filter out: NA p-adj
outTable <- outTable[! is.na(outTable$`p-adj`),]
## Significant at 0.05
outTable$sigpadj005 <- ifelse(curTable$`p-adj` < 0.05, "yes_padj005", "no_padj005")
View(outTable)
outTablecurTable$`p-adj`
curTable$`p-adj`
## Significant at 0.05
outTable$sigpadj005 <- ifelse(outTable$`p-adj` < 0.05, "yes_padj005", "no_padj005")
outTable$sigpadj010 <- ifelse(outTable$`p-adj` < 0.10, "yes_padj010", "no_padj010")
outTable$sigpval005 <- ifelse(outTable$`p-val` < 0.05, "yes_pval005", "no_pval005")
outTable$sigpval010 <- ifelse(outTable$`p-val` < 0.05, "yes_pval010", "no_pval010")
outTable
View(outTable)
## Output: Per condition table ----
# 1. One table per condition, with condition as a name
# 2. Saves to target output directory
for (df in 1:length(allDiffExWald)) {
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, i.map, by="gene_id", all.x=T)
## OutTable
outTable <- curTable[,c(5,1,2,3,4)]
## Filter clean outs: L2FC
outTable <- outTable[abs(outTable$L2FC) > 1,]
## Filter by: pval
outTable <- outTable[abs(outTable$`p-val`) < 0.12,]
## Filter out: NA p-adj
outTable <- outTable[! is.na(outTable$`p-adj`),]
## Significant at 0.05
outTable$sigpadj005 <- ifelse(outTable$`p-adj` < 0.05, "yes_padj005", "no_padj005")
outTable$sigpadj010 <- ifelse(outTable$`p-adj` < 0.10, "yes_padj010", "no_padj010")
outTable$sigpval005 <- ifelse(outTable$`p-val` < 0.05, "yes_pval005", "no_pval005")
outTable$sigpval010 <- ifelse(outTable$`p-val` < 0.05, "yes_pval010", "no_pval010")
## Generates output path
outpath = paste(i.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = outTable, file = outpath, quote = F,
sep = "\t", row.names = F, col.names = T)
}
## Output: Per condition table ----
# 1. One table per condition, with condition as a name
# 2. Saves to target output directory
for (df in 1:length(allDiffExWald)) {
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, i.map, by="gene_id", all.x=T)
## OutTable: pick only useful columns
outTable <- curTable[,c(5,1,2,3,4)]
## Filter clean outs: L2FC
outTable <- outTable[abs(outTable$L2FC) > 1,]
## Filter by: pval
outTable <- outTable[abs(outTable$`p-val`) < 0.12,]
## Filter out: NA p-adj
outTable <- outTable[! is.na(outTable$`p-adj`),]
## Significant at 0.05
outTable$sigpadj005 <- ifelse(outTable$`p-adj` < 0.05, "yes_padj005", "no_padj005")
outTable$sigpadj010 <- ifelse(outTable$`p-adj` < 0.10, "yes_padj010", "no_padj010")
outTable$sigpval005 <- ifelse(outTable$`p-val` < 0.05, "yes_pval005", "no_pval005")
outTable$sigpval010 <- ifelse(outTable$`p-val` < 0.10, "yes_pval010", "no_pval010")
## Generates output path
outpath = paste(i.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = outTable, file = outpath, quote = F,
sep = "\t", row.names = F, col.names = T)
}
## Output: Per condition table ----
# 1. One table per condition, with condition as a name
# 2. Saves to target output directory
for (df in 1:length(allDiffExWald)) {
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, i.map, by="gene_id", all.x=T)
## OutTable: pick only useful columns
outTable <- curTable[,c(5,1,2,3,4)]
## Filter clean outs: L2FC
outTable <- outTable[abs(outTable$L2FC) > 1,]
## Filter by: pval
outTable <- outTable[abs(outTable$`p-val`) < 0.12,]
## Filter out: NA p-adj
outTable <- outTable[! is.na(outTable$`p-adj`),]
## Significant at 0.05
outTable$sigpadj005 <- ifelse(outTable$`p-adj` < 0.05, "yes_padj005", "no_padj005")
outTable$sigpadj010 <- ifelse(outTable$`p-adj` < 0.10, "yes_padj010", "no_padj010")
outTable$sigpval005 <- ifelse(outTable$`p-val` < 0.05, "yes_pval005", "no_pval005")
outTable$sigpval010 <- ifelse(outTable$`p-val` < 0.10, "yes_pval010", "no_pval010")
## Generates output path
outpath = paste(i.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = outTable, file = outpath, quote = F,
sep = "\t", row.names = F, col.names = T)
}
# tximport ----
files <- file.path(i.salmon, i.metadata$Run, "quant.sf")
### Import with tximport
txi <- tximport(files, type="salmon", tx2gene = i.map)
DESeq2_Wald <- function(InTxiData, InMetadata, InInterestColumn) {
## Default formulae
InFormula = paste("~", InInterestColumn, sep="")
## Create DDS object with given metadata
ddsWald <- DESeqDataSetFromTximport(InTxiData,
colData = InMetadata,
design = as.formula(InFormula))
## Runs DESeq2
out.ddsWald <- DESeq(ddsWald, parallel=T, fitType = "local")
## Extracts outputs
# Treatment combinations
treat.combs <- as.data.frame(permutations(n = length(levels(InMetadata[,InInterestColumn])),
r = 2,
v = levels(InMetadata[,InInterestColumn]),
repeats.allowed = F))
# Names of treatments
treat.combs$text.combs = paste(treat.combs[,1], treat.combs[,2], sep='_')
# DESeq out list
deseq.out <- list()
# Loops over treatment
for (trat in 1:nrow(treat.combs)) {
## Gets first trat name
trat1 <- as.character(treat.combs[trat,1])
## Gets second trat name
trat2 <- as.character(treat.combs[trat,2])
## Gets paired name
trat.name <- as.character(treat.combs[trat,3])
## Get numbers from DESeq2
deseq.tmp.results <- results(out.ddsWald, contrast=c(InInterestColumn, trat1, trat2))
## Filter out bad stuff
# deseq.tmp.results <- deseq.tmp.results[!is.na(deseq.tmp.results$padj),]
# deseq.tmp.results <- deseq.tmp.results[abs(deseq.tmp.results$log2FoldChange) > 1, ]
## Round numbers (less disk space)
deseq.tmp.results$pvalue <- round(deseq.tmp.results$pvalue, 4)
deseq.tmp.results$log2FoldChange <- round(deseq.tmp.results$log2FoldChange, 4)
deseq.tmp.results$padj <- round(deseq.tmp.results$padj, 4)
## Saves in a list, treatment by treatment
deseq.out[trat.name] <- deseq.tmp.results
}
## Final output tables
DiffExGenesLists <- deseq.out
return(DiffExGenesLists)
}
### Extract all treatments
treatmentCols <- grep(pattern = "^C_", x = colnames(i.metadata))
timeCourseCols <- grep(pattern = "^TC_", x = colnames(i.metadata))
## Loop: generates one DESeq2 object per column ----
allDiffExWald <- list()
for (cols in treatmentCols){
## Generates colNames
## Grabs the interestColumn
interestColumn <- colnames(i.metadata[cols])
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, i.metadata, interestColumn)
## Stores output
### Parses list into objects
all.df <- unlist(tmp.diffex)
for (listElement in 1:length(all.df)) {
## Saves DF inside another list
allDiffExWald[names(all.df[listElement])] <- all.df[listElement]
}
}
## Start with empty df
# all.df <- data.frame(matrix(nrow=dim(allDiffExWald[[1]])[1],ncol=0))
count_flag = 0
for (df in names(allDiffExWald)){
## Adds gene names
# allDiffExWald[df][[1]]$gene <- row.names(allDiffExWald[df][[1]])
## Captures each diffex.df
current.df <- as.data.frame(allDiffExWald[df])
## Add gene name
current.df$gene <- row.names(allDiffExWald[df][[1]])
## Keeps only useful info
current.df <- current.df[,c(2,5,6,7)]
## Stores the information.
## if 0: new table
## if =! 0: merge tables
if (count_flag == 0) {
keep.df <- current.df
} else {
keep.df <- merge(keep.df, current.df, by = "gene")
}
## Adds to counter
count_flag = count_flag + 1
}
## Output: master table (keep.df)
### Merge gene and isoform
i.map.tmp <- i.map
colnames(i.map.tmp)[2] <- "gene"
keep.df <- merge(keep.df, i.map.tmp, by = "gene")
### Put gene as col2, isoform as col1
allColsLength <- dim(keep.df)[2]
keep.df <- keep.df[,c(1,allColsLength,2:(allColsLength-1))]
## Generates output path
outpath_master = paste(i.outdir, "MasterTable", ".tsv", sep = "")
## Escreve a tabela
write.table(x = keep.df, file = outpath_master, quote = F,
sep = "\t", row.names = F, col.names = T)
## Output: Per condition table ----
# 1. One table per condition, with condition as a name
# 2. Saves to target output directory
for (df in 1:length(allDiffExWald)) {
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, i.map, by="gene_id", all.x=T)
## OutTable: pick only useful columns
outTable <- curTable[,c(5,1,2,3,4)]
## Filter clean outs: L2FC
outTable <- outTable[abs(outTable$L2FC) > 1,]
## Filter by: pval
outTable <- outTable[abs(outTable$`p-val`) < 0.12,]
## Filter out: NA p-adj
outTable <- outTable[! is.na(outTable$`p-adj`),]
## Significant at 0.05
outTable$sigpadj005 <- ifelse(outTable$`p-adj` < 0.05, "yes_padj005", "no_padj005")
outTable$sigpadj010 <- ifelse(outTable$`p-adj` < 0.10, "yes_padj010", "no_padj010")
outTable$sigpval005 <- ifelse(outTable$`p-val` < 0.05, "yes_pval005", "no_pval005")
outTable$sigpval010 <- ifelse(outTable$`p-val` < 0.10, "yes_pval010", "no_pval010")
## Generates output path
outpath = paste(i.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = outTable, file = outpath, quote = F,
sep = "\t", row.names = F, col.names = T)
}
