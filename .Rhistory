InInterestColumn = "C_Dummy"
## Default formulae
InFormula = paste("~", InInterestColumn, sep="")
## Default formulae
InFormula = paste("~", InInterestColumn, sep="")
InFormula
## Create DDS object with given metadata
ddsWald <- DESeqDataSetFromTximport(InTxiData,
colData = InMetadata,
design = as.formula(InFormula))
ddsWald@colData
## Runs DESeq2
ddsWald <- DESeq(ddsWald, parallel=T, fitType = "local")
## Extracts outputs
# Treatment combinations
treat.combs <- as.data.frame(permutations(n = length(levels(InMetadata[,InInterestColumn])),
r = 2,
v = levels(InMetadata[,InInterestColumn]),
repeats.allowed = F))
# Names of treatments
treat.combs$text.combs = paste(treat.combs[,1], treat.combs[,2], sep='_')
# DESeq out list
deseq.out <- list()
# Loops over treatment
for (trat in 1:nrow(treat.combs)) {
## Gets first trat name
trat1 <- as.character(treat.combs[trat,1])
## Gets second trat name
trat2 <- as.character(treat.combs[trat,2])
## Gets paired name
trat.name <- as.character(treat.combs[trat,3])
## Get numbers from DESeq2
deseq.tmp.results <- results(ddsWald, contrast=c(InInterestColumn, trat1, trat2))
## Filter out bad stuff
deseq.tmp.results <- deseq.tmp.results[!is.na(deseq.tmp.results$padj),]
deseq.tmp.results <- deseq.tmp.results[abs(deseq.tmp.results$log2FoldChange) > 1, ]
## Saves in a list, treatment by treatment
deseq.out[trat.name] <- deseq.tmp.results
}
deseq.out
InInterestColumn
trat.name
# Loops over treatment
for (trat in 1:nrow(treat.combs)) {
## Gets first trat name
trat1 <- as.character(treat.combs[trat,1])
## Gets second trat name
trat2 <- as.character(treat.combs[trat,2])
## Gets paired name
trat.name <- as.character(treat.combs[trat,3])
## Get numbers from DESeq2
deseq.tmp.results <- results(ddsWald, contrast=c(InInterestColumn, trat1, trat2))
## Filter out bad stuff
deseq.tmp.results <- deseq.tmp.results[!is.na(deseq.tmp.results$padj),]
deseq.tmp.results <- deseq.tmp.results[abs(deseq.tmp.results$log2FoldChange) > 1, ]
## Saves in a list, treatment by treatment
deseq.out[trat.name] <- deseq.tmp.results
}
as.character("C_Dummy")
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, dummy.metadata, as.character("C_Dummy"))
txi$abundance
txi
dummy.metadata
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, dummy.metadata, as.character("TC_Time"))
DESeq2_Wald(txi, dummy.metadata, as.character("TC_Time"))
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, dummy.metadata, as.character("TC_time"))
InInterestColumn = "TC_time"
## Default formulae
InFormula = paste("~", InInterestColumn, sep="")
## Create DDS object with given metadata
ddsWald <- DESeqDataSetFromTximport(InTxiData,
colData = InMetadata,
design = as.formula(InFormula))
## Runs DESeq2
out.ddsWald <- DESeq(ddsWald, parallel=T, fitType = "local")
## Extracts outputs
# Treatment combinations
treat.combs <- as.data.frame(permutations(n = length(levels(InMetadata[,InInterestColumn])),
r = 2,
v = levels(InMetadata[,InInterestColumn]),
repeats.allowed = F))
# Names of treatments
treat.combs$text.combs = paste(treat.combs[,1], treat.combs[,2], sep='_')
treat.combs
# DESeq out list
deseq.out <- list()
# Loops over treatment
for (trat in 1:nrow(treat.combs)) {
## Gets first trat name
trat1 <- as.character(treat.combs[trat,1])
## Gets second trat name
trat2 <- as.character(treat.combs[trat,2])
## Gets paired name
trat.name <- as.character(treat.combs[trat,3])
## Get numbers from DESeq2
deseq.tmp.results <- results(out.ddsWald, contrast=c(InInterestColumn, trat1, trat2))
## Filter out bad stuff
deseq.tmp.results <- deseq.tmp.results[!is.na(deseq.tmp.results$padj),]
deseq.tmp.results <- deseq.tmp.results[abs(deseq.tmp.results$log2FoldChange) > 1, ]
## Saves in a list, treatment by treatment
deseq.out[trat.name] <- deseq.tmp.results
}
resultsNames(out.ddsWald)
deseq.out
DESeq2_Wald <- function(InTxiData, InMetadata, InInterestColumn) {
## Default formulae
InFormula = paste("~", InInterestColumn, sep="")
## Create DDS object with given metadata
ddsWald <- DESeqDataSetFromTximport(InTxiData,
colData = InMetadata,
design = as.formula(InFormula))
## Runs DESeq2
out.ddsWald <- DESeq(ddsWald, parallel=T, fitType = "local")
## Extracts outputs
# Treatment combinations
treat.combs <- as.data.frame(permutations(n = length(levels(InMetadata[,InInterestColumn])),
r = 2,
v = levels(InMetadata[,InInterestColumn]),
repeats.allowed = F))
# Names of treatments
treat.combs$text.combs = paste(treat.combs[,1], treat.combs[,2], sep='_')
# DESeq out list
deseq.out <- list()
# Loops over treatment
for (trat in 1:nrow(treat.combs)) {
## Gets first trat name
trat1 <- as.character(treat.combs[trat,1])
## Gets second trat name
trat2 <- as.character(treat.combs[trat,2])
## Gets paired name
trat.name <- as.character(treat.combs[trat,3])
## Get numbers from DESeq2
deseq.tmp.results <- results(out.ddsWald, contrast=c(InInterestColumn, trat1, trat2))
## Filter out bad stuff
deseq.tmp.results <- deseq.tmp.results[!is.na(deseq.tmp.results$padj),]
deseq.tmp.results <- deseq.tmp.results[abs(deseq.tmp.results$log2FoldChange) > 1, ]
## Saves in a list, treatment by treatment
deseq.out[trat.name] <- deseq.tmp.results
}
## Final output tables
DiffExGenesLists <- deseq.out
return(DiffExGenesLists)
}
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, dummy.metadata, as.character("TC_time"))
## Loop: generates one DESeq2 object per column ----
allDiffExWald <- list()
for (cols in treatmentCols){
## Generates colNames
## Grabs the interestColumn
interestColumn <- colnames(metadata[cols])
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, dummy.metadata, interestColumn)
## Stores output
allDiffExWald[interestColumn] <- tmp.diffex
}
allDiffExWald
str(allDiffExWald)
str(allDiffExWald[2])
str(allDiffExWald[2])
str(allDiffExWald[2][1])
str(allDiffExWald[2][1])
levels(allDiffexWald)
length(allDiffexWald)
length(allDiffexWald[1])
length(allDiffexWald[2])
length(allDiffexWald[1][1])
unlist(allDiffexWald)
unlist
unlist(allDiffexWald[1])
?unlist
unlist(as.list(allDiffexWald))
unlist(as.list(allDiffexWald[1]))
unlist(as.list(allDiffexWald[1][1]))
allDiffexWald
allDiffexWald
## Loop: generates one DESeq2 object per column ----
allDiffExWald <- list()
for (cols in treatmentCols){
## Generates colNames
## Grabs the interestColumn
interestColumn <- colnames(metadata[cols])
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, dummy.metadata, interestColumn)
## Stores output
allDiffExWald[interestColumn] <- tmp.diffex
}
unlist(allDiffExWald)
## De-list and store
delist <- unlist(allDiffExWald)
str(delist)
delist$C_Temperature
delist$C_Dummy
dummy.metadata <- read.delim("E:/Workspace/GIT/algae2/test/01_deseq2_Wald/data/intel/PRJNA609760/metadata.txt", stringsAsFactors=T)
metadata <- dummy.metadata
## Loop: generates one DESeq2 object per column ----
allDiffExWald <- list()
for (cols in treatmentCols){
## Generates colNames
## Grabs the interestColumn
interestColumn <- colnames(metadata[cols])
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, dummy.metadata, interestColumn)
## Stores output
allDiffExWald[interestColumn] <- tmp.diffex
}
dummy.metadata$C_Complex
## De-list and store
delist <- unlist(allDiffExWald)
treatmentCols
### Extract all treatments
treatmentCols <- grep(pattern = "^C_", x = colnames(dummy.metadata))
timeCourseCols <- grep(pattern = "^TC_", x = colnames(dummy.metadata))
treatmentCols
### Extract all treatments
treatmentCols <- grep(pattern = "^C_", x = colnames(dummy.metadata))
timeCourseCols <- grep(pattern = "^TC_", x = colnames(dummy.metadata))
## Loop: generates one DESeq2 object per column ----
allDiffExWald <- list()
for (cols in treatmentCols){
## Generates colNames
## Grabs the interestColumn
interestColumn <- colnames(metadata[cols])
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, dummy.metadata, interestColumn)
## Stores output
allDiffExWald[interestColumn] <- tmp.diffex
}
## De-list and store
delist <- unlist(allDiffExWald)
delist$C_Complex
DiffExGenesLists
tmp.diffex
test <- unlist(tmp.diffex)
## Loop: generates one DESeq2 object per column ----
allDiffExWald <- list()
for (cols in treatmentCols){
## Generates colNames
## Grabs the interestColumn
interestColumn <- colnames(metadata[cols])
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, dummy.metadata, interestColumn)
## Stores output
allDiffExWald[interestColumn] <- unlist(tmp.diffex)
}
test$allDiffExWald
allDiffExWald
## Loop: generates one DESeq2 object per column ----
allDiffExWald <- list()
unlist(tmp.diffex)
test <- unlist(tmp.diffex)
test$Five_Fifty
## Stores output
allDiffExWald[interestColumn] <- unlist(tmp.diffex)
## Loop: generates one DESeq2 object per column ----
allDiffExWald <- list()
for (cols in treatmentCols){
## Generates colNames
## Grabs the interestColumn
interestColumn <- colnames(metadata[cols])
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, dummy.metadata, interestColumn)
## Stores output
for (item in unlist(tmp.diffex)) {
allDiffExWald[interestColumn] <- item
}
}
## De-list and store
allDiffExWald$C_Dummy
unlist(tmp.diffex)
## Stores output
for (item in unlist(tmp.diffex)) {
print(item)
#allDiffExWald[interestColumn] <- item
}
## Stores output
for (item in unlist(tmp.diffex)) {
print(item)
#allDiffExWald[interestColumn] <- item
}
## Stores output
for (item in unlist(tmp.diffex)) {
save <- item
#allDiffExWald[interestColumn] <- item
}
unlist(tmp.diffex)
test <- unlist(tmp.diffex)
all.df
## Stores output
### Parses list into objects
all.df <- unlist(tmp.diffex)
all.df$Fifty_Five
str(all.df)
unlist(all.df)
unlist(all.df)
all.df.df <- unlist(all.df)
all.df.df$Fifty_Five
str(all.df.df)
length(all.df)
all.df
all.df[1]
names(all.df[1])
## Loop: generates one DESeq2 object per column ----
allDiffExWald <- list()
for (cols in treatmentCols){
## Generates colNames
## Grabs the interestColumn
interestColumn <- colnames(metadata[cols])
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, dummy.metadata, interestColumn)
## Stores output
### Parses list into objects
all.df <- unlist(tmp.diffex)
for (listElement in 1:length(all.df)) {
## Saves DF inside another list
allDiffExWald[names(all.df[listElement])] <- data.frame(all.df[listElement])
}
}
allDiffExWald$
dummy.outdir <- "test/01_deseq2_Wald/results/06_diffex/output"
length(allDiffExWald)
names(allDiffexWald[1])
names(allDiffexWald)
allDiffexWald
allDiffExWald
allDiffExWald
names(allDiffExWald)
allDiffExWald$`12_hours_72_hours`
## Loop: generates one DESeq2 object per column ----
allDiffExWald <- list()
for (cols in treatmentCols){
## Generates colNames
## Grabs the interestColumn
interestColumn <- colnames(metadata[cols])
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, dummy.metadata, interestColumn)
## Stores output
### Parses list into objects
all.df <- unlist(tmp.diffex)
for (listElement in 1:length(all.df)) {
## Saves DF inside another list
allDiffExWald[names(all.df[listElement])] <- all.df[listElement]
}
}
allDiffExWald$High_temperature_Low_temperature
allDiffExWald[1]
names(allDiffExWald[1])
as.data.frame(allDiffExWald[1])
View(as.data.frame(allDiffExWald[1]))
colnames(allDiffExWald[df])
allDiffExWald[df]
allDiffExWald
allDiffExWald$High_temperature_Low_temperature
colnames(allDiffExWald$High_temperature_Low_temperature)
dummy.outdir
## Generates output path
outpath = paste(dummy.outdir, "DiffEx_", curTableName, sep = "")
df =1
curTableName <- names(allDiffExWald[df])
curTableName
## Generates output path
outpath = paste(dummy.outdir, "DiffEx_", curTableName, sep = "")
outpath
# Writing outputs ----
# 1. One table per condition, with condition as a name
# 2. Saves to target output directory
for (df in 1:length(allDiffExWald)) {
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC, p-val, p-adj")
## Generates output path
outpath = paste(dummy.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = curTable, file = "", quote = F,
sep = "\t", row.names = T, col.names = T)
}
# Writing outputs ----
# 1. One table per condition, with condition as a name
# 2. Saves to target output directory
for (df in 1:length(allDiffExWald)) {
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC, p-val, p-adj")
## Generates output path
outpath = paste(dummy.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = curTable, file = outpath, quote = F,
sep = "\t", row.names = T, col.names = T)
}
outpath
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene <- row.names(curTable)
View(curTable)
## OutTable
outTable <- curTable[,c(4,1,2,3)]
View(outTable)
txi$abundance
txiData
dummy.map
## Merge with Isoform
curTable <- merge(curTable, dummy.map, by="gene_id", all.x=T)
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, dummy.map, by="gene_id", all.x=T)
View(curTable)
## OutTable
outTable <- curTable[,c(4,5,1,2,3)]
View(outTable)
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, dummy.map, by="gene_id", all.x=T)
View(curTable)
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, dummy.map, by="gene_id", all.x=T)
## OutTable
outTable <- curTable[,c(5,1,2,3,4)]
## Generates output path
outpath = paste(dummy.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = curTable, file = outpath, quote = F,
sep = "\t", row.names = F, col.names = T)
# Writing outputs ----
# 1. One table per condition, with condition as a name
# 2. Saves to target output directory
for (df in 1:length(allDiffExWald)) {
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, dummy.map, by="gene_id", all.x=T)
## OutTable
outTable <- curTable[,c(5,1,2,3,4)]
## Generates output path
outpath = paste(dummy.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = curTable, file = outpath, quote = F,
sep = "\t", row.names = F, col.names = T)
}
View(outTable)
# Writing outputs ----
# 1. One table per condition, with condition as a name
# 2. Saves to target output directory
for (df in 1:length(allDiffExWald)) {
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, dummy.map, by="gene_id", all.x=T)
## OutTable
outTable <- curTable[,c(5,1,2,3,4)]
## Generates output path
outpath = paste(dummy.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = curTable, file = outpath, quote = F,
sep = "\t", row.names = F, col.names = T)
}
View(outTable)
# Writing outputs ----
# 1. One table per condition, with condition as a name
# 2. Saves to target output directory
for (df in 1:length(allDiffExWald)) {
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, dummy.map, by="gene_id", all.x=T)
## OutTable
outTable <- curTable[,c(5,1,2,3,4)]
## Generates output path
outpath = paste(dummy.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = outTable, file = outpath, quote = F,
sep = "\t", row.names = F, col.names = T)
}
listElement
all.df[listElement]
