## Loop: generates one DESeq2 object per column ----
allDiffExWald <- list()
for (cols in treatmentCols){
## Generates colNames
## Grabs the interestColumn
interestColumn <- colnames(metadata[cols])
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, dummy.metadata, interestColumn)
## Stores output
### Parses list into objects
all.df <- unlist(tmp.diffex)
for (listElement in 1:length(all.df)) {
## Saves DF inside another list
allDiffExWald[names(all.df[listElement])] <- data.frame(all.df[listElement])
}
}
allDiffExWald$
dummy.outdir <- "test/01_deseq2_Wald/results/06_diffex/output"
length(allDiffExWald)
names(allDiffexWald[1])
names(allDiffexWald)
allDiffexWald
allDiffExWald
allDiffExWald
names(allDiffExWald)
allDiffExWald$`12_hours_72_hours`
## Loop: generates one DESeq2 object per column ----
allDiffExWald <- list()
for (cols in treatmentCols){
## Generates colNames
## Grabs the interestColumn
interestColumn <- colnames(metadata[cols])
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, dummy.metadata, interestColumn)
## Stores output
### Parses list into objects
all.df <- unlist(tmp.diffex)
for (listElement in 1:length(all.df)) {
## Saves DF inside another list
allDiffExWald[names(all.df[listElement])] <- all.df[listElement]
}
}
allDiffExWald$High_temperature_Low_temperature
allDiffExWald[1]
names(allDiffExWald[1])
as.data.frame(allDiffExWald[1])
View(as.data.frame(allDiffExWald[1]))
colnames(allDiffExWald[df])
allDiffExWald[df]
allDiffExWald
allDiffExWald$High_temperature_Low_temperature
colnames(allDiffExWald$High_temperature_Low_temperature)
dummy.outdir
## Generates output path
outpath = paste(dummy.outdir, "DiffEx_", curTableName, sep = "")
df =1
curTableName <- names(allDiffExWald[df])
curTableName
## Generates output path
outpath = paste(dummy.outdir, "DiffEx_", curTableName, sep = "")
outpath
# Writing outputs ----
# 1. One table per condition, with condition as a name
# 2. Saves to target output directory
for (df in 1:length(allDiffExWald)) {
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC, p-val, p-adj")
## Generates output path
outpath = paste(dummy.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = curTable, file = "", quote = F,
sep = "\t", row.names = T, col.names = T)
}
# Writing outputs ----
# 1. One table per condition, with condition as a name
# 2. Saves to target output directory
for (df in 1:length(allDiffExWald)) {
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC, p-val, p-adj")
## Generates output path
outpath = paste(dummy.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = curTable, file = outpath, quote = F,
sep = "\t", row.names = T, col.names = T)
}
outpath
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene <- row.names(curTable)
View(curTable)
## OutTable
outTable <- curTable[,c(4,1,2,3)]
View(outTable)
txi$abundance
txiData
dummy.map
## Merge with Isoform
curTable <- merge(curTable, dummy.map, by="gene_id", all.x=T)
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, dummy.map, by="gene_id", all.x=T)
View(curTable)
## OutTable
outTable <- curTable[,c(4,5,1,2,3)]
View(outTable)
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, dummy.map, by="gene_id", all.x=T)
View(curTable)
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, dummy.map, by="gene_id", all.x=T)
## OutTable
outTable <- curTable[,c(5,1,2,3,4)]
## Generates output path
outpath = paste(dummy.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = curTable, file = outpath, quote = F,
sep = "\t", row.names = F, col.names = T)
# Writing outputs ----
# 1. One table per condition, with condition as a name
# 2. Saves to target output directory
for (df in 1:length(allDiffExWald)) {
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, dummy.map, by="gene_id", all.x=T)
## OutTable
outTable <- curTable[,c(5,1,2,3,4)]
## Generates output path
outpath = paste(dummy.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = curTable, file = outpath, quote = F,
sep = "\t", row.names = F, col.names = T)
}
View(outTable)
# Writing outputs ----
# 1. One table per condition, with condition as a name
# 2. Saves to target output directory
for (df in 1:length(allDiffExWald)) {
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, dummy.map, by="gene_id", all.x=T)
## OutTable
outTable <- curTable[,c(5,1,2,3,4)]
## Generates output path
outpath = paste(dummy.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = curTable, file = outpath, quote = F,
sep = "\t", row.names = F, col.names = T)
}
View(outTable)
# Writing outputs ----
# 1. One table per condition, with condition as a name
# 2. Saves to target output directory
for (df in 1:length(allDiffExWald)) {
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, dummy.map, by="gene_id", all.x=T)
## OutTable
outTable <- curTable[,c(5,1,2,3,4)]
## Generates output path
outpath = paste(dummy.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = outTable, file = outpath, quote = F,
sep = "\t", row.names = F, col.names = T)
}
listElement
all.df[listElement]
cat("Test")
echo("Test")
print("Test")
test = "Bum"
print(test)
message(test)
# Dummy vars ----
### [r2c] Dummy vars
i.salmon <- "test/01_deseq2_Wald/results/06_diffex/salmon_quant_PRJNA609760"
i.threads <- 6
i.outdir <- "test/01_deseq2_Wald/results/06_diffex/output"
i.metadata <- read.delim("test/01_deseq2_Wald/data/intel/PRJNA609760/metadata.txt")
i.map <- read.delim("test/01_deseq2_Wald/results/04_trinity_assembly/trinity_PRJNA609760/gene_trans_map.transposed", stringsAsFactors = F)
# tximport ----
files <- file.path(i.salmon, i.metadata$Run, "quant.sf")
### Import with tximport
txi <- tximport(files, type="salmon", i.map)
### Libraries
require("DESeq2", quietly = T)
require("tximport", quietly = T)
require("gtools", quietly = T)
require("BiocParallel", quietly = T)
# tximport ----
files <- file.path(i.salmon, i.metadata$Run, "quant.sf")
### Import with tximport
txi <- tximport(files, type="salmon", i.map)
i.map
# Dummy vars ----
### [r2c] Dummy vars
i.salmon <- "test/01_deseq2_Wald/results/06_diffex/salmon_quant_PRJNA609760"
i.threads <- 6
i.outdir <- "test/01_deseq2_Wald/results/06_diffex/output"
i.metadata <- read.delim("test/01_deseq2_Wald/data/intel/PRJNA609760/metadata.txt")
i.map <- read.delim("test/01_deseq2_Wald/results/04_trinity_assembly/trinity_PRJNA609760/gene_trans_map.transposed", stringsAsFactors = F)
# tximport ----
files <- file.path(i.salmon, i.metadata$Run, "quant.sf")
### Import with tximport
txi <- tximport(files, type="salmon", tx2gene = i.map)
DESeq2_Wald <- function(InTxiData, InMetadata, InInterestColumn) {
## Default formulae
InFormula = paste("~", InInterestColumn, sep="")
## Create DDS object with given metadata
ddsWald <- DESeqDataSetFromTximport(InTxiData,
colData = InMetadata,
design = as.formula(InFormula))
## Runs DESeq2
out.ddsWald <- DESeq(ddsWald, parallel=T, fitType = "local")
## Extracts outputs
# Treatment combinations
treat.combs <- as.data.frame(permutations(n = length(levels(InMetadata[,InInterestColumn])),
r = 2,
v = levels(InMetadata[,InInterestColumn]),
repeats.allowed = F))
# Names of treatments
treat.combs$text.combs = paste(treat.combs[,1], treat.combs[,2], sep='_')
# DESeq out list
deseq.out <- list()
# Loops over treatment
for (trat in 1:nrow(treat.combs)) {
## Gets first trat name
trat1 <- as.character(treat.combs[trat,1])
## Gets second trat name
trat2 <- as.character(treat.combs[trat,2])
## Gets paired name
trat.name <- as.character(treat.combs[trat,3])
## Get numbers from DESeq2
deseq.tmp.results <- results(out.ddsWald, contrast=c(InInterestColumn, trat1, trat2))
## Filter out bad stuff
deseq.tmp.results <- deseq.tmp.results[!is.na(deseq.tmp.results$padj),]
deseq.tmp.results <- deseq.tmp.results[abs(deseq.tmp.results$log2FoldChange) > 1, ]
## Saves in a list, treatment by treatment
deseq.out[trat.name] <- deseq.tmp.results
}
## Final output tables
DiffExGenesLists <- deseq.out
return(DiffExGenesLists)
}
### Extract all treatments
treatmentCols <- grep(pattern = "^C_", x = colnames(i.metadata))
timeCourseCols <- grep(pattern = "^TC_", x = colnames(i.metadata))
## Loop: generates one DESeq2 object per column ----
allDiffExWald <- list()
for (cols in treatmentCols){
## Generates colNames
## Grabs the interestColumn
interestColumn <- colnames(i.metadata[cols])
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, i.metadata, interestColumn)
## Stores output
### Parses list into objects
all.df <- unlist(tmp.diffex)
for (listElement in 1:length(all.df)) {
## Saves DF inside another list
allDiffExWald[names(all.df[listElement])] <- all.df[listElement]
}
}
# Writing outputs ----
# 1. One table per condition, with condition as a name
# 2. Saves to target output directory
for (df in 1:length(allDiffExWald)) {
curTable <- as.data.frame(allDiffExWald[df])
curTableName <- names(allDiffExWald[df])
## Only L2FC, p-val, p-adj
curTable <- curTable[,c(2,5,6)]
colnames(curTable) <- c("L2FC", "p-val", "p-adj")
curTable$gene_id <- row.names(curTable)
## Merge with Isoform
curTable <- merge(curTable, i.map, by="gene_id", all.x=T)
## OutTable
outTable <- curTable[,c(5,1,2,3,4)]
## Generates output path
outpath = paste(i.outdir, "DiffEx_", curTableName, ".tsv", sep = "")
## Escreve a tabela
write.table(x = outTable, file = outpath, quote = F,
sep = "\t", row.names = F, col.names = T)
}
i.map <- read.delim("test/01_deseq2_Wald/results/04_trinity_assembly/trinity_PRJNA609760/gene_trans_map.transposed", stringsAsFactors = F)
head(i.map)
i.map <- read.delim("test/01_deseq2_Wald/results/04_trinity_assembly/trinity_PRJNA609760/gene_trans_map.transposed", stringsAsFactors = F, header = F)
i.map
head(i.map)
#### Add colnames to tx2gene map
colnames(i_map) <- c("transcript_id", "gene_id")
#### Add colnames to tx2gene map
colnames(i.map) <- c("transcript_id", "gene_id")
head(i.map)
deseq.tmp.results
round(deseq.tmp.results, 4)
round(deseq.tmp.results, 3)
round(deseq.tmp.results$pvalue, 3)
round(deseq.tmp.results$pvalue, 4)
DESeq2_Wald <- function(InTxiData, InMetadata, InInterestColumn) {
## Default formulae
InFormula = paste("~", InInterestColumn, sep="")
## Create DDS object with given metadata
ddsWald <- DESeqDataSetFromTximport(InTxiData,
colData = InMetadata,
design = as.formula(InFormula))
## Runs DESeq2
out.ddsWald <- DESeq(ddsWald, parallel=T, fitType = "local")
## Extracts outputs
# Treatment combinations
treat.combs <- as.data.frame(permutations(n = length(levels(InMetadata[,InInterestColumn])),
r = 2,
v = levels(InMetadata[,InInterestColumn]),
repeats.allowed = F))
# Names of treatments
treat.combs$text.combs = paste(treat.combs[,1], treat.combs[,2], sep='_')
# DESeq out list
deseq.out <- list()
# Loops over treatment
for (trat in 1:nrow(treat.combs)) {
## Gets first trat name
trat1 <- as.character(treat.combs[trat,1])
## Gets second trat name
trat2 <- as.character(treat.combs[trat,2])
## Gets paired name
trat.name <- as.character(treat.combs[trat,3])
## Get numbers from DESeq2
deseq.tmp.results <- results(out.ddsWald, contrast=c(InInterestColumn, trat1, trat2))
## Filter out bad stuff
deseq.tmp.results <- deseq.tmp.results[!is.na(deseq.tmp.results$padj),]
deseq.tmp.results <- deseq.tmp.results[abs(deseq.tmp.results$log2FoldChange) > 1, ]
## Round numbers (less disk space)
deseq.tmp.results$pvalue <- round(deseq.tmp.results$pvalue, 4)
deseq.tmp.results$log2FoldChange <- round(deseq.tmp.results$log2FoldChange, 4)
deseq.tmp.results$padj <- round(deseq.tmp.results$log2FoldChange, 4)
## Saves in a list, treatment by treatment
deseq.out[trat.name] <- deseq.tmp.results
}
## Final output tables
DiffExGenesLists <- deseq.out
return(DiffExGenesLists)
}
DiffExGenesLists
deseq.tmp.results$padj <- round(deseq.tmp.results$padj, 4)
deseq.tmp.results
DESeq2_Wald <- function(InTxiData, InMetadata, InInterestColumn) {
## Default formulae
InFormula = paste("~", InInterestColumn, sep="")
## Create DDS object with given metadata
ddsWald <- DESeqDataSetFromTximport(InTxiData,
colData = InMetadata,
design = as.formula(InFormula))
## Runs DESeq2
out.ddsWald <- DESeq(ddsWald, parallel=T, fitType = "local")
## Extracts outputs
# Treatment combinations
treat.combs <- as.data.frame(permutations(n = length(levels(InMetadata[,InInterestColumn])),
r = 2,
v = levels(InMetadata[,InInterestColumn]),
repeats.allowed = F))
# Names of treatments
treat.combs$text.combs = paste(treat.combs[,1], treat.combs[,2], sep='_')
# DESeq out list
deseq.out <- list()
# Loops over treatment
for (trat in 1:nrow(treat.combs)) {
## Gets first trat name
trat1 <- as.character(treat.combs[trat,1])
## Gets second trat name
trat2 <- as.character(treat.combs[trat,2])
## Gets paired name
trat.name <- as.character(treat.combs[trat,3])
## Get numbers from DESeq2
deseq.tmp.results <- results(out.ddsWald, contrast=c(InInterestColumn, trat1, trat2))
## Filter out bad stuff
deseq.tmp.results <- deseq.tmp.results[!is.na(deseq.tmp.results$padj),]
deseq.tmp.results <- deseq.tmp.results[abs(deseq.tmp.results$log2FoldChange) > 1, ]
## Round numbers (less disk space)
deseq.tmp.results$pvalue <- round(deseq.tmp.results$pvalue, 4)
deseq.tmp.results$log2FoldChange <- round(deseq.tmp.results$log2FoldChange, 4)
deseq.tmp.results$padj <- round(deseq.tmp.results$padj, 4)
## Saves in a list, treatment by treatment
deseq.out[trat.name] <- deseq.tmp.results
}
## Final output tables
DiffExGenesLists <- deseq.out
return(DiffExGenesLists)
}
DiffExGenesLists
deseq.tmp.results
# Dummy vars ----
### [r2c] Dummy vars
i.salmon <- "test/01_deseq2_Wald/results/06_diffex/salmon_quant_PRJNA609760"
i.threads <- 6
i.outdir <- "test/01_deseq2_Wald/results/06_diffex/output"
i.metadata <- read.delim("test/01_deseq2_Wald/data/intel/PRJNA609760/metadata.txt")
i.map <- read.delim("test/01_deseq2_Wald/results/04_trinity_assembly/trinity_PRJNA609760/gene_trans_map.transposed", stringsAsFactors = F, header = F)
# tximport ----
files <- file.path(i.salmon, i.metadata$Run, "quant.sf")
### Import with tximport
txi <- tximport(files, type="salmon", tx2gene = i.map)
DESeq2_Wald <- function(InTxiData, InMetadata, InInterestColumn) {
## Default formulae
InFormula = paste("~", InInterestColumn, sep="")
## Create DDS object with given metadata
ddsWald <- DESeqDataSetFromTximport(InTxiData,
colData = InMetadata,
design = as.formula(InFormula))
## Runs DESeq2
out.ddsWald <- DESeq(ddsWald, parallel=T, fitType = "local")
## Extracts outputs
# Treatment combinations
treat.combs <- as.data.frame(permutations(n = length(levels(InMetadata[,InInterestColumn])),
r = 2,
v = levels(InMetadata[,InInterestColumn]),
repeats.allowed = F))
# Names of treatments
treat.combs$text.combs = paste(treat.combs[,1], treat.combs[,2], sep='_')
# DESeq out list
deseq.out <- list()
# Loops over treatment
for (trat in 1:nrow(treat.combs)) {
## Gets first trat name
trat1 <- as.character(treat.combs[trat,1])
## Gets second trat name
trat2 <- as.character(treat.combs[trat,2])
## Gets paired name
trat.name <- as.character(treat.combs[trat,3])
## Get numbers from DESeq2
deseq.tmp.results <- results(out.ddsWald, contrast=c(InInterestColumn, trat1, trat2))
## Filter out bad stuff
deseq.tmp.results <- deseq.tmp.results[!is.na(deseq.tmp.results$padj),]
deseq.tmp.results <- deseq.tmp.results[abs(deseq.tmp.results$log2FoldChange) > 1, ]
## Round numbers (less disk space)
deseq.tmp.results$pvalue <- round(deseq.tmp.results$pvalue, 4)
deseq.tmp.results$log2FoldChange <- round(deseq.tmp.results$log2FoldChange, 4)
deseq.tmp.results$padj <- round(deseq.tmp.results$padj, 4)
## Saves in a list, treatment by treatment
deseq.out[trat.name] <- deseq.tmp.results
}
## Final output tables
DiffExGenesLists <- deseq.out
return(DiffExGenesLists)
}
### Extract all treatments
treatmentCols <- grep(pattern = "^C_", x = colnames(i.metadata))
timeCourseCols <- grep(pattern = "^TC_", x = colnames(i.metadata))
## Loop: generates one DESeq2 object per column ----
allDiffExWald <- list()
for (cols in treatmentCols){
## Generates colNames
## Grabs the interestColumn
interestColumn <- colnames(i.metadata[cols])
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, i.metadata, interestColumn)
## Stores output
### Parses list into objects
all.df <- unlist(tmp.diffex)
for (listElement in 1:length(all.df)) {
## Saves DF inside another list
allDiffExWald[names(all.df[listElement])] <- all.df[listElement]
}
}
allDiffExWald
allDiffExWald$High_temperature_Low_temperature
curTable
curTable$`p-val`
curTable$`p-adj``
curTable$`p-adj`
curTable$`p-adj` < 0
curTable$`p-adj` < 0.05
ifelse(curTable$`p-adj` < 0.05, "yes", "no")
ifelse(curTable$`p-val` < 0.05, "yes_padj005", "no_padj005")
