colData = InMetadata,
design = as.formula(InFormula))
## Runs DESeq2
out.ddsWald <- DESeq(ddsWald, parallel=T, fitType = "local")
## Extracts outputs
# Treatment combinations
treat.combs <- as.data.frame(permutations(n = length(levels(InMetadata[,InInterestColumn])),
r = 2,
v = levels(InMetadata[,InInterestColumn]),
repeats.allowed = F))
# Names of treatments
treat.combs$text.combs = paste(treat.combs[,1], treat.combs[,2], sep='_')
# DESeq out list
deseq.out <- list()
# Loops over treatment
for (trat in 1:nrow(treat.combs)) {
## Gets first trat name
trat1 <- as.character(treat.combs[trat,1])
## Gets second trat name
trat2 <- as.character(treat.combs[trat,2])
## Gets paired name
trat.name <- as.character(treat.combs[trat,3])
## Get numbers from DESeq2
deseq.tmp.results <- results(out.ddsWald, contrast=c(InInterestColumn, trat1, trat2))
## Filter out bad stuff
# deseq.tmp.results <- deseq.tmp.results[!is.na(deseq.tmp.results$padj),]
# deseq.tmp.results <- deseq.tmp.results[abs(deseq.tmp.results$log2FoldChange) > 1, ]
## Round numbers (less disk space)
deseq.tmp.results$pvalue <- round(deseq.tmp.results$pvalue, 4)
deseq.tmp.results$log2FoldChange <- round(deseq.tmp.results$log2FoldChange, 4)
deseq.tmp.results$padj <- round(deseq.tmp.results$padj, 4)
## Saves in a list, treatment by treatment
deseq.out[trat.name] <- deseq.tmp.results
}
## Final output tables
DiffExGenesLists <- deseq.out
return(DiffExGenesLists)
}
### Extract all treatments
treatmentCols <- grep(pattern = "^C_", x = colnames(i.metadata))
timeCourseCols <- grep(pattern = "^TC_", x = colnames(i.metadata))
## Loop: generates one DESeq2 object per column ----
allDiffExWald <- list()
for (cols in treatmentCols){
## Generates colNames
## Grabs the interestColumn
interestColumn <- colnames(i.metadata[cols])
## Runs diffEx
tmp.diffex <- DESeq2_Wald(txi, i.metadata, interestColumn)
## Stores output
### Parses list into objects
all.df <- unlist(tmp.diffex)
for (listElement in 1:length(all.df)) {
## Saves DF inside another list
allDiffExWald[names(all.df[listElement])] <- all.df[listElement]
}
}
## Start with empty df
# all.df <- data.frame(matrix(nrow=dim(allDiffExWald[[1]])[1],ncol=0))
count_flag = 0
for (df in names(allDiffExWald)){
## Adds gene names
# allDiffExWald[df][[1]]$gene <- row.names(allDiffExWald[df][[1]])
## Captures each diffex.df
current.df <- as.data.frame(allDiffExWald[df])
## Add gene name
current.df$gene <- row.names(allDiffExWald[df][[1]])
## Keeps only useful info
current.df <- current.df[,c(2,5,6,7)]
## Stores the information.
## if 0: new table
## if =! 0: merge tables
if (count_flag == 0) {
keep.df <- current.df
} else {
keep.df <- merge(keep.df, current.df, by = "gene")
}
## Adds to counter
count_flag = count_flag + 1
}
## Output: master table (keep.df)
### Merge gene and isoform
i.map.tmp <- i.map
colnames(i.map.tmp)[2] <- "gene"
keep.df <- merge(keep.df, i.map.tmp, by = "gene")
### Put gene as col2, isoform as col1
allColsLength <- dim(keep.df)[2]
keep.df <- keep.df[,c(1,allColsLength,2:(allColsLength-1))]
## Generates output path
outpath_master = paste(i.outdir, "MasterTable", ".tsv", sep = "")
tmp.diffex
current.df
current.df[1,]
current.df[,1]
current.df[,1] > 1
mod(current.df[,1]) > 1
abs(current.df[,1]) > 1
deseq.tmp.results
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
## Get one sig column
column <- padj.cols[column_index]
## Get column names
colname <- colnames(df.masterTable)[column]
## Removes ".padj" from end of string
sigcolname <- strsplit(colname, ".padj")[[1]]
## Split treatments:
### [1] T1
### [2] T2.padj
## Filter out NAs
df.tmp <- df.masterTable[!is.na(df.masterTable[,column] <= 0.05),]
## Get significant values
sigvals <- ifelse(df.tmp[,column] <= 0.05,
yes = TRUE,
no = FALSE)
}
sigvals
df.masterTable[,column]
na.replace(df.masterTable[,column], 1)
df.masterTable[,column] <- na.replace(df.masterTable[,column], 1)
df.masterTable[,column]
# [ Annotate stress activity ] ####
## 1. Get all columns with sig padj
## 2. Split per category
## 3. Bind back, split with ";"
padj.cols <- grep("padj", colnames(df.masterTable))
# [[ Case 1. Generic A vs B ]] ####
## Split first 6 columns, since output is always doubled
valid.cols.limit <- (length(padj.cols)/2)
padj.cols <- padj.cols[1:valid.cols.limit]
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
## Get one sig column
column <- padj.cols[column_index]
## Get column names
colname <- colnames(df.masterTable)[column]
## Removes ".padj" from end of string
sigcolname <- strsplit(colname, ".padj")[[1]]
## Split treatments:
### [1] T1
### [2] T2.padj
## Replace NAs with 1
df.masterTable[,column] <- na.replace(df.masterTable[,column], 1)
## Get significant values
sigvals <- ifelse(df.tmp[,column] <= 0.05,
yes = TRUE,
no = FALSE)
}
sigvals
df.masterTable[,column]
sigvals
sigcolname
## Generates a new data frame with transcripts
df.masterTable[c("gene", "transcriptID"),]
## Generates a new data frame with transcripts
df.masterTable[c("gene", "transcript_id"),]
## Generates a new data frame with transcripts
df.masterTable[,c("gene", "transcript_id")]
## Generates a new data frame with transcripts
df.to.transcriptTable <- df.masterTable[,c("transcript_id", "gene")]
View(df.to.transcriptTable)
sigval
sigvals
sigcolname
paste(sigcolname; sigcolname)
paste(sigcolname, sigcolname)
paste(sigcolname, sigcolname, sep=";")
View(dummy.map)
df.masterTable[,1]
df.masterTable[1,]
df.to.transcriptTable[1,]
dim(df.to.transcriptTable)
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
## Get one sig column
column <- padj.cols[column_index]
## Get column names
colname <- colnames(df.masterTable)[column]
## Removes ".padj" from end of string
sigcolname <- strsplit(colname, ".padj")[[1]]
## Split treatments:
### [1] T1
### [2] T2.padj
## Replace NAs with 1
df.masterTable[,column] <- na.replace(df.masterTable[,column], 1)
## Get significant values
sigvals <- ifelse(df.tmp[,column] <= 0.05,
yes = sigcolname,
no = "")
## Based on which transcript, paste treatment name for
## significant ones
}
sigvals
df.to.transcriptTable$Stress <- ""
df.to.transcriptTable
df.to.transcriptTable$Stress
paste(df.to.transcriptTable$Stress)
paste(df.to.transcriptTable$Stress, sigvals)
df.to.transcriptTable$Stress <- c()
df.to.transcriptTable$Stress
df.to.transcriptTable$Stress <- NA
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
## Get one sig column
column <- padj.cols[column_index]
## Get column names
colname <- colnames(df.masterTable)[column]
## Removes ".padj" from end of string
sigcolname <- strsplit(colname, ".padj")[[1]]
## Split treatments:
### [1] T1
### [2] T2.padj
## Replace NAs with 1
df.masterTable[,column] <- na.replace(df.masterTable[,column], 1)
## Get significant values
sigvals <- ifelse(df.tmp[,column] <= 0.05,
yes = sigcolname,
no = "")
## Based on which transcript, paste treatment name for
## significant ones
}
paste(df.to.transcriptTable$Stress, sigvals)
df.to.transcriptTable$Stress <- NaN
paste(df.to.transcriptTable$Stress, sigvals)
paste(df.to.transcriptTable$Stress, sigvals, sep=";")
df.to.transcriptTable$Stress <- ""
paste(df.to.transcriptTable$Stress, sigvals, sep=";")
df.to.transcriptTable$Stress <- sigvals
## Get significant values
sigvals <- ifelse(df.tmp[,column] <= 0.05,
yes = sigcolname)
## Get significant values
sigvals <- ifelse(df.tmp[,column] <= 0.05,
yes = sigcolname,
no = "")
paste(df.to.transcriptTable$Stress, sigvals, sep=";")
gsub("^;", "", paste(df.to.transcriptTable$Stress, sigvals, sep=";"))
## Remove bad stuff from start of transcript table
gsub("^;", "", df.to.transcriptTable$Stress)
paste(df.to.transcriptTable$Stress, sigvals, sep=";")
sigvals
## Based on which transcript, paste treatment name for
## significant ones
df.to.transcriptTable <- paste(df.to.transcriptTable$Stress,
sigvals, sep=";")
## Generates a new data frame with transcripts
df.to.transcriptTable <- df.masterTable[,c("transcript_id", "gene")]
df.to.transcriptTable$Stress <- ""
## Based on which transcript, paste treatment name for
## significant ones
df.to.transcriptTable$Stress <- paste(
df.to.transcriptTable$Stress,
sigvals, sep=";")
## Based on which transcript, paste treatment name for
## significant ones
df.to.transcriptTable$Stress <- paste(
df.to.transcriptTable$Stress,
sigvals, sep=";")
df.to.transcriptTable$Stress
## Get significant values
sigvals <- ifelse(df.tmp[,column] <= 0.05,
yes = sigcolname,
no = c())
## Get significant values
sigvals <- ifelse(df.tmp[,column] <= 0.05,
yes = sigcolname,
no = NULL)
## Get significant values
sigvals <- ifelse(df.tmp[,column] <= 0.05,
yes = sigcolname,
no = NA)
sigvals
## Based on which transcript, paste treatment name for
## significant ones
df.to.transcriptTable$Stress <- paste(
df.to.transcriptTable$Stress,
sigvals, sep=";")
df.to.transcriptTable$Stress
df.to.transcriptTable$Multisignificance <- 0
# Generates a new data frame with transcripts
df.to.transcriptTable <- df.masterTable[,c("transcript_id", "gene")]
## Save a string with ; with the significant treatments
df.to.transcriptTable$Stresses <- ""
## Counts how many times it was significant in stresses
df.to.transcriptTable$Multisignificance <- 0
ifelse(c(True,True,False),yes="Y",no="N")
ifelse(c(T,T,F),yes="Y",no="N")
ifelse(c(T,T,F),yes=("Y" && "A"),no="N")
ifelse(c(T,T,F),yes=("Y" || "A"),no="N")
df.tmp[,column] <= 0.05
df.to.transcriptTable$Multisignificance
df.tmp[,column] <= 0.05 + df.to.transcriptTable$Multisignificance
as.integer(df.tmp[,column] <= 0.05) + df.to.transcriptTable$Multisignificance
as.integer(df.tmp[,column] <= 0.05) + df.to.transcriptTable$Multisignificance
as.integer(na.replace(df.tmp[,column] <= 0.05, 0)) + df.to.transcriptTable$Multisignificance
## Sum one per significant treatment
df.tmp[,column] <= 0.05
df.tmp[,column]
# [ Annotate stress activity ] ####
## 1. Get all columns with sig padj
## 2. Split per category
## 3. Bind back, split with ";"
padj.cols <- grep("padj", colnames(df.masterTable))
# [[ Case 1. Generic A vs B ]] ####
## Split first 6 columns, since output is always doubled
valid.cols.limit <- (length(padj.cols)/2)
padj.cols <- padj.cols[1:valid.cols.limit]
# Generates a new data frame with transcripts
df.to.transcriptTable <- df.masterTable[,c("transcript_id", "gene")]
## Save a string with ; with the significant treatments
df.to.transcriptTable$Stresses <- ""
## Counts how many times it was significant in stresses
df.to.transcriptTable$Multisignificance <- 0
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
## Get one sig column
column <- padj.cols[column_index]
## Get column names
colname <- colnames(df.masterTable)[column]
## Removes ".padj" from end of string
sigcolname <- strsplit(colname, ".padj")[[1]]
## Split treatments:
### [1] T1
### [2] T2.padj
## Replace NAs with 1
df.masterTable[,column] <- na.replace(df.masterTable[,column], 1)
## Get significant values
sigvals <- ifelse(df.tmp[,column] <= 0.05,
yes = sigcolname,
no = "NS")
## Based on which transcript, paste treatment name for
## significant ones
df.to.transcriptTable$Stress <- paste(
df.to.transcriptTable$Stress,
sigvals, sep=";")
## Sum one per significant treatment
df.tmp[,column] <= 0.05
}
df.tmp[,column]
df.tmp
df.tmp$df.masterTable
df.masterTable
#### [ Input files ] ####
## 1. Samba coding/noncoding TSV
df.samba <- read.delim(
file = "./test/02_transcriptTable/samba.tsv",
stringsAsFactors = F
)
## 2. RNA-Seq MasterTable
df.masterTable <- read.delim(
file = "./test/02_transcriptTable/MasterTable.tsv",
stringsAsFactors = F
)
## 3. Emapper table
text.emapper <- read.delim(
file = "./test/02_transcriptTable/test.emapper.annotations",
stringsAsFactors = F
)
# [ Annotate stress activity ] ####
## 1. Get all columns with sig padj
## 2. Split per category
## 3. Bind back, split with ";"
padj.cols <- grep("padj", colnames(df.masterTable))
# [[ Case 1. Generic A vs B ]] ####
## Split first 6 columns, since output is always doubled
valid.cols.limit <- (length(padj.cols)/2)
padj.cols <- padj.cols[1:valid.cols.limit]
# Generates a new data frame with transcripts
df.to.transcriptTable <- df.masterTable[,c("transcript_id", "gene")]
## Save a string with ; with the significant treatments
df.to.transcriptTable$Stresses <- ""
## Counts how many times it was significant in stresses
df.to.transcriptTable$Multisignificance <- 0
# Generates a new data frame with transcripts
df.to.transcriptTable <- df.masterTable[,c("transcript_id", "gene")]
## Save a string with ; with the significant treatments
df.to.transcriptTable$Stresses <- ""
## Counts how many times it was significant in stresses
df.to.transcriptTable$Multisignificance <- 0
as.int(df.masterTable[,column] <= 0.05)
as.integer(df.masterTable[,column] <= 0.05)
na.replace(as.integer(df.masterTable[,column] <= 0.05), 0)
# Generates a new data frame with transcripts
df.to.transcriptTable <- df.masterTable[,c("transcript_id", "gene")]
## Save a string with ; with the significant treatments
df.to.transcriptTable$Stresses <- ""
## Counts how many times it was significant in stresses
df.to.transcriptTable$Multisignificance <- 0
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
## Makes a tmp replacement
df.tmp <- df.masterTable
## Get one sig column
column <- padj.cols[column_index]
## Get column names
colname <- colnames(df.masterTable)[column]
## Removes ".padj" from end of string
sigcolname <- strsplit(colname, ".padj")[[1]]
## Split treatments:
### [1] T1
### [2] T2.padj
## Replace NAs with 1
df.masterTable[,column] <- na.replace(df.tmp[,column], 1)
## Get significant values
sigvals <- ifelse(df.tmp[,column] <= 0.05,
yes = sigcolname,
no = "NS")
## Based on which transcript, paste treatment name for
## significant ones
df.to.transcriptTable$Stress <- paste(
df.to.transcriptTable$Stress,
sigvals, sep=";")
## Sum one per significant treatment
### Get all significants as 1
sumvec <- na.replace(as.integer(df.masterTable[,column] <= 0.05), 0)
### Sum to table
df.to.transcriptTable$Multisignificance <-
df.to.transcriptTable$Multisignificance + sumvec
}
## Remove bad stuff from start of transcript table
df.to.transcriptTable$Stress <- gsub("^;", "", df.to.transcriptTable$Stress)
View(df.to.transcriptTable)
# Generates a new data frame with transcripts
df.to.transcriptTable <- df.masterTable[,c("transcript_id", "gene")]
## Save a string with ; with the significant treatments
#df.to.transcriptTable$Stresses <- ""
## Counts how many times it was significant in stresses
df.to.transcriptTable$Multisignificance <- 0
## Test value per value, for each valid column
for (column_index in 1:length(padj.cols)) {
## Makes a tmp replacement
df.tmp <- df.masterTable
## Get one sig column
column <- padj.cols[column_index]
## Get column names
colname <- colnames(df.masterTable)[column]
## Removes ".padj" from end of string
sigcolname <- strsplit(colname, ".padj")[[1]]
## Split treatments:
### [1] T1
### [2] T2.padj
## Replace NAs with 1
df.masterTable[,column] <- na.replace(df.tmp[,column], 1)
## Get significant values
sigvals <- ifelse(df.tmp[,column] <= 0.05,
yes = sigcolname,
no = "NS")
## Based on which transcript, paste treatment name for
## significant ones
df.to.transcriptTable$Stress <- paste(
df.to.transcriptTable$Stress,
sigvals, sep=";")
## Sum one per significant treatment
### Get all significants as 1
sumvec <- na.replace(as.integer(df.masterTable[,column] <= 0.05), 0)
### Sum to table
df.to.transcriptTable$Multisignificance <-
df.to.transcriptTable$Multisignificance + sumvec
}
View(df.to.transcriptTable)
## Remove bad stuff from start of transcript table
df.to.transcriptTable$Stress <- gsub("^;", "", df.to.transcriptTable$Stress)
View(df.to.transcriptTable)
text.emapper
View(text.emapper)
colnames(text.emapper)[1] <- "transcript_id"
View(df.to.transcriptTable)
## 3. Emapper table
df.emapper <- read.delim(
file = "./test/02_transcriptTable/test.emapper.annotations",
stringsAsFactors = F
)
colnames(df.emapper)[1] <- "transcript_id"
## Add KO and annotation
df.emapper.sub <- df.emapper[,c("eggNOG.annot", "KEGG_KOs", "transcript_id")]
View(df.emapper.sub)
View(df.to.transcriptTable)
## Merge out
df.out <- merge(
y = df.emapper.sub,
x = df.to.transcriptTable,
by = "transcript_id"
)
View(df.out)
View(df.emapper)
df.samba
df.samba$sequence_name
df.samba$coding_score
df.samba$classification
## Merge again, with samba
df.out <- merge(x = df.out,
y = df.samba[,c(1,3)],
by = "transcript_id")
View(df.samba)
colnames(df.samba)[1] <- "transcript_id"
## Merge again, with samba
df.out <- merge(x = df.out,
y = df.samba[,c(1,3)],
by = "transcript_id")
View(df.out)
?merge()
## Merge out
df.out <- merge(y = df.emapper.sub,
x = df.to.transcriptTable,
by = "transcript_id",
all.x = T)
## Merge again, with samba
df.out <- merge(x = df.out,
y = df.samba[,c(1,3)],
by = "transcript_id",
all.x = T)
View(df.out)
